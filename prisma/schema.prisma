// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map(name: "sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

// Custom Models https://www.prismabuilder.io/

model User {
  id             String    @id @default(cuid())
  name           String?
  hashedPassword String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  createdAt      DateTime  @default(now()) @map(name: "created_at")
  updatedAt      DateTime  @default(now()) @map(name: "updated_at")
  bio            String?
  links          String?
  location       String?
  phone          String?

  accounts Account[]
  sessions Session[]
  pack     Pack?     @relation("UserPack")

  @@map(name: "users")
}

model Pack {
  id     String @id @unique @default(cuid())
  userId String @unique
  user   User   @relation("UserPack", fields: [userId], references: [id])

  members PackMember[]

  @@map(name: "pack")
}

// One member to one pack, in the future we may want many to many
model PackMember {
  id       String @id @default(cuid())
  packId   String @unique
  name     String
  breed    String
  age      String
  imageURL String
  size     String

  pack Pack @relation(fields: [packId], references: [id], onDelete: Cascade)

  @@index([packId])
  @@map(name: "pack_members")
}
