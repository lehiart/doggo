// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Role {
  USER
  COMPANY
}

model Account {
  id                String   @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map(name: "sessions")
}

model VerificationToken {
  id          String    @id @default(uuid())
  token       String    @unique
  activatedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())

  userId String?

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([id, token])
  @@index([userId])
  @@map(name: "verification_tokens")
}

model ResetPasswordToken {
  id        String   @id @default(uuid())
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  userId String?

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([id, token])
  @@index([userId])
  @@map(name: "reset_password_tokens")
}

////////////////////////////////////////// USER   ///////////////////////////////////////////////////////

model User {
  id             String   @id @default(uuid())
  name           String?
  hashedPassword String?
  email          String?  @unique
  emailVerified  Boolean  @default(false)
  image          String?
  createdAt      DateTime @default(now()) @map(name: "created_at")
  updatedAt      DateTime @default(now()) @map(name: "updated_at")
  role           Role     @default(USER)

  accounts           Account[]
  sessions           Session[]
  verificationTokens VerificationToken[]
  resetPasswordToken ResetPasswordToken[]
  profile            Profile?

  pack          Pack?          @relation("UserPack") // user can have zero (role: company) or one pack (role: user)
  favoriteItems FavoriteItems? @relation("UserFavoriteItems") // only user (role: user) can have favorite items
  companies     Company[]      @relation("UserCompanies") // user can have zero (role: user) or many companies (role: company)
  opinions      Opinion[]
  requests      Request[]

  @@map(name: "users")
}

////////////////////////////////////////// USER PROFILE   ///////////////////////////////////////////////////////

model Profile {
  id       String  @id @default(uuid())
  userId   String  @unique //only one profile for one user
  bio      String?
  links    String?
  location String?
  phone    String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map(name: "profiles")
}

///////////////////////////// USER COMPANIES FOR ROLE: COMPANY  ///////////////////////////////////////////////////////

model Company {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  ownerId   String

  pro  Boolean @default(false)
  slug String  @unique

  image            String?
  name             String?
  description      String?
  streetAddress    String?
  streetNumber     String?
  streetAddress2   String?
  locality         String?
  city             String?
  state            String?
  zip              String?
  phone            String?
  email            String?
  website          String?
  socialMediaLinks String?

  categories Category[] @relation("CompanyCategories")
  owner      User       @relation("UserCompanies", fields: [ownerId], references: [id], onDelete: Cascade) // company has only one owner
  items      Item[]     @relation("CompanyItems")
  opinions   Opinion[]
  requests   Request[]

  @@index([ownerId])
}

////////////////////////////////////////// PACK & PACK MEMBERS  ///////////////////////////////////////////////////////
////// Pack has many members, members have only one pack
///// Member is a dog with info

model Pack {
  id     String @id @unique @default(uuid())
  userId String @unique
  user   User   @relation("UserPack", fields: [userId], references: [id], onDelete: Cascade)

  members PackMember[]

  @@map(name: "pack")
}

model PackMember {
  id       String  @id @default(uuid())
  packId   String
  name     String
  breed    String
  age      String
  imageURL String?
  size     String
  gender   String
  weight   String?

  pack Pack @relation(fields: [packId], references: [id], onDelete: Cascade)

  @@index([packId])
  @@map(name: "pack_members")
}

///////////////////////////////////////  ITEMS & FAVORITE ITEMS LIST   //////////////////////////////////////////////////
////// Item can be part of a favoriteItems list, favoriteItems list has many items
////// Item has a required 1 category, category has many items
///// Item has many subcategories, subcategories have only one item
////// Item has a required 1 company, company has many items

model FavoriteItems {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation("UserFavoriteItems", fields: [userId], references: [id], onDelete: Cascade)

  items Item[]
}

model Item {
  id             String  @id @default(uuid())
  title          String
  description    String
  published      Boolean @default(false)
  onlineBusiness Boolean @default(false)

  categoryId      String
  companyId       String
  favoriteItemsId String?

  category      Category       @relation("ItemCategory", fields: [categoryId], references: [id])
  subcategories Subcategory[]  @relation("ItemSubcategories")
  favoriteItems FavoriteItems? @relation(fields: [favoriteItemsId], references: [id])
  company       Company        @relation("CompanyItems", fields: [companyId], references: [id])

  @@index([favoriteItemsId])
  @@index([categoryId])
  @@index([companyId])
}

////////////////////////////////////////////////   CATEGORY & SUBCATEGORY   //////////////////////////////////////////////////
////// Category has many subcategories, subcategories have only one category

model Category {
  id   String @id @default(uuid())
  name String @unique
  slug String @unique

  items         Item[]        @relation("ItemCategory")
  subcategories Subcategory[] @relation("SubcategoriesOfCategory")
  companies     Company[]     @relation("CompanyCategories")
}

model Subcategory {
  id         String @id @default(uuid())
  name       String @unique
  slug       String @unique
  categoryId String

  items    Item[]   @relation("ItemSubcategories")
  category Category @relation("SubcategoriesOfCategory", fields: [categoryId], references: [id])

  @@index([categoryId])
}

////////////////////////////////////////////////   OPINIONS   //////////////////////////////////////////////////
///// role:user can have many opinions for many items, item can have many opinions
//a company hold all opinions for all items, in case an item is deleted
// item name is a default value for the case when item is deleted

model Opinion {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  userId    String
  itemId    String
  itemName  String
  companyId String

  rating  Int
  comment String

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([companyId])
}

///////////////////////  CLIENT REQUESTS ///////////////////////

enum Status {
  PENDING
  ACCEPTED
  REJECTED
}

model Request {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  userId    String
  companyId String

  status         Status  @default(PENDING)
  message        String
  selectedItems  String?
  reasonToReject String?

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([companyId])
}
