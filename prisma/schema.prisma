// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String   @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map(name: "sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

////////////////////////////////////////// NORMAL USER   ///////////////////////////////////////////////////////

model User {
  id             String    @id @default(uuid())
  name           String?
  hashedPassword String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  createdAt      DateTime  @default(now()) @map(name: "created_at")
  updatedAt      DateTime  @default(now()) @map(name: "updated_at")
  bio            String?
  links          String?
  location       String?
  phone          String?

  accounts      Account[]
  sessions      Session[]
  pack          Pack?          @relation("UserPack")
  favoriteItems FavoriteItems? @relation("UserFavoriteItems")

  @@map(name: "users")
}

////////////////////////////////////////// PACK & PACK MEMBERS  ///////////////////////////////////////////////////////
////// Pack has many members, members have only one pack
///// Member is a dog with info

model Pack {
  id     String @id @unique @default(uuid())
  userId String @unique
  user   User   @relation("UserPack", fields: [userId], references: [id])

  members PackMember[]

  @@map(name: "pack")
}

model PackMember {
  id       String @id @default(uuid())
  packId   String @unique
  name     String
  breed    String
  age      String
  imageURL String
  size     String

  pack Pack @relation(fields: [packId], references: [id], onDelete: Cascade)

  @@index([packId])
  @@map(name: "pack_members")
}

///////////////////////////////////////  ITEMS & FAVORITE ITEMS LIST   //////////////////////////////////////////////////
////// Item can be part of a favoriteItems list, favoriteItems list has many items
////// Item has a required 1 category, category has many items
///// Item has many subcategories, subcategories have only one item
////// Item has a required 1 company, company has many items

model FavoriteItems {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation("UserFavoriteItems", fields: [userId], references: [id])

  items Item[]
}

model Item {
  id          String @id @default(uuid())
  title       String
  description String
  // addressStreet String
  // addressCity   String
  // addressState  String
  // addressZip    String
  // openingHours  String
  // closingHours  String

  categoryId      String
  companyId       String
  favoriteItemsId String?

  category      Category      @relation("ItemCategory", fields: [categoryId], references: [id])
  subcategories Subcategory[] @relation("ItemSubcategories")

  FavoriteItems FavoriteItems? @relation(fields: [favoriteItemsId], references: [id])

  company Company @relation("CompanyItems", fields: [companyId], references: [id])

  @@index([favoriteItemsId])
  @@index([categoryId])
  @@index([companyId])
}

////////////////////////////////////////////////   CATEGORY & SUBCATEGORY   //////////////////////////////////////////////////
////// Category has many subcategories, subcategories have only one category

model Category {
  id    String @id @default(uuid())
  name  String @unique
  route String @unique

  items         Item[]        @relation("ItemCategory")
  subcategories Subcategory[] @relation("SubcategoriesOfCategory")
}

model Subcategory {
  id         String @id @default(uuid())
  name       String @unique
  route      String @unique
  categoryId String

  items    Item[]   @relation("ItemSubcategories")
  category Category @relation("SubcategoriesOfCategory", fields: [categoryId], references: [id])

  @@index([categoryId])
}

////////////////////////////////////////////////   COMPANY USER   //////////////////////////////////////////////////
// Company can create items
// Company user has many items, items have only one company

model Company {
  id             String    @id @default(uuid())
  name           String
  hashedPassword String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  createdAt      DateTime  @default(now()) @map(name: "created_at")
  updatedAt      DateTime  @default(now()) @map(name: "updated_at")

  pro Boolean @default(false)

  items Item[] @relation("CompanyItems")
}
